version: 2

references:

base_image: &base_image
  hashicorp/terraform:0.12.28

working_directory: &working_directory
  ~/example

default_config: &default_config
  docker:
    - image: *base_image
  working_directory: *working_directory
  environment:
    BASH_ENV: /root/.bashrc

repo_cache_key: &repo_cache_key
  v1-repo-{{ .Branch }}-{{ .Revision }}

# Step to restore repository from cache
restore_repo: &restore_repo
  restore_cache:
    key: *repo_cache_key

save_repo: &save_repo
  save_cache:
    key: *repo_cache_key
    paths:
      - *working_directory

set_terraform_environment: &set_terraform_environment
  run:
    name: set terraform environment
    command: |
      cd && touch $BASH_ENV

      if [ "$CIRCLE_BRANCH" == "master" ]; then
        AWS_ACCESS_KEY_ID=${PRODUCTION_AWS_ACCESS_KEY_ID}
        AWS_SECRET_ACCESS_KEY=${PRODUCTION_AWS_SECRET_ACCESS_KEY}
        mkdir ~/.aws
        echo -e "[default]\naws_access_key_id=$AWS_ACCESS_KEY_ID\naws_secret_access_key=$AWS_SECRET_ACCESS_KEY\n" > ~/.aws/credentials
        echo 'aws configure --profile prod list'
        mkdir ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
        echo 'export TERRAFORM_ENVIRONMENT=production' >> $BASH_ENV
      fi
      if [ "$CIRCLE_BRANCH" == "staging" ]; then
        AWS_ACCESS_KEY_ID=${STAGING_AWS_ACCESS_KEY_ID}
        AWS_SECRET_ACCESS_KEY=${STAGING_AWS_SECRET_ACCESS_KEY}
        mkdir ~/.aws
        echo -e "[default]\naws_access_key_id=$AWS_ACCESS_KEY_ID\naws_secret_access_key=$AWS_SECRET_ACCESS_KEY\n" > ~/.aws/credentials
        echo 'aws configure --profile staging list'
        mkdir ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
        echo 'export TERRAFORM_ENVIRONMENT=staging' >> $BASH_ENV
      fi
      if [ "$CIRCLE_BRANCH" == "dev" ]; then
        AWS_ACCESS_KEY_ID=${DEV_AWS_ACCESS_KEY_ID}
        AWS_SECRET_ACCESS_KEY=${DEV_AWS_SECRET_ACCESS_KEY}
        mkdir ~/.aws
        echo -e "[default]\naws_access_key_id=$AWS_ACCESS_KEY_ID\naws_secret_access_key=$AWS_SECRET_ACCESS_KEY\n" > ~/.aws/credentials
        echo 'aws configure --profile development list'
        mkdir ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
        echo 'export TERRAFORM_ENVIRONMENT=development' >> $BASH_ENV
      fi

terraform_init: &terraform_init
  run:
    name: terraform init
    command: |
      source $BASH_ENV
      cd environments/$TERRAFORM_ENVIRONMENT
      terraform init

apply_job: &apply_job
  <<: *default_config
  steps:
    - *restore_repo
    - *set_terraform_environment
    - *terraform_init
    - attach_workspace:
        at: *working_directory
    - run:
        name: terraform apply
        command: |
          source $BASH_ENV
          cd environments/$TERRAFORM_ENVIRONMENT
          terraform apply --auto-approve ../../terraform.plan

jobs:

  build:
    <<: *default_config
    steps:
      - checkout
      - *set_terraform_environment
      - run:
          name: terraform fmt
          command: |
            source $BASH_ENV
            cd environments/$TERRAFORM_ENVIRONMENT

            if [ $(terraform fmt | grep -v .terraform | tee fmt_result.txt | wc -l) -gt 0 ]; then
              echo "Format of this terraform files is not appropiate:"
              echo

              cat fmt_result.txt
              rm fmt_result.txt
              git checkout -- .

              echo
              echo "Please run terraform fmt"

              exit 1
            fi
      - *save_repo

  plan:
    <<: *default_config
    steps:
      - *restore_repo
      - *set_terraform_environment
      - *terraform_init
      - run:
          name: terraform plan
          command: |
            source $BASH_ENV
            cd environments/$TERRAFORM_ENVIRONMENT
            terraform plan -out=../../terraform.plan
      - persist_to_workspace:
          root: *working_directory
          paths:
            - terraform.plan

  apply:
    <<: *apply_job
  apply-with-approval:
    <<: *apply_job

workflows:
  version: 2
  build_plan_approve_apply:
    jobs:
      - build
      - plan:
          requires:
            - build
          filters:
            branches:
              only:
              - master 
              - staging
              - dev
      - approve:
          type: approval
          requires:
            - plan
          filters:
            branches:
              only: master
      - apply-with-approval:
          requires:
            - approve
          filters:
            branches:
              only: master
      - apply:
          requires:
            - plan
          filters:
            branches:
              only: 
              - staging
              - dev
